// Upgrade pricing configuration for laptop products
// This file is auto-generated by the Admin Settings panel
// Last updated: 2025-10-16T20:14:13.194Z

// RAM upgrade prices based on processor generation
export const ramUpgradePrices = {
  ddr3: {
    generations: ['3rd Gen', '4th Gen', '5th Gen'],
    ramType: 'DDR3/DDR3L',
    options: [
      { capacity: '4GB', price: 1000, label: '4GB DDR3' },
      { capacity: '8GB', price: 2500, label: '8GB DDR3' }
    ]
  },
  ddr4: {
    generations: ['6th Gen', '7th Gen', '8th Gen', '9th Gen', '10th Gen', '11th Gen'],
    ramType: 'DDR4',
    options: [
      { capacity: '4GB', price: 3500, label: '4GB DDR4' },
      { capacity: '8GB', price: 6000, label: '8GB DDR4' },
      { capacity: '16GB', price: 11500, label: '16GB DDR4' }
    ]
  }
};

// SSD upgrade prices - supports upgrade paths from different capacities
export const ssdUpgradePrices = {
  '125GB': {
    '256GB': 3000,
    '512GB': 8000,
    '1TB': 18500
  },
  '128GB': {
    '256GB': 3000,
    '512GB': 8000,
    '1TB': 18500
  },
  '256GB': {
    '512GB': 8000,
    '1TB': 15500
  },
  '512GB': {
    '1TB': 10500
  }
};

// Helper function to get RAM options based on processor generation
export const getRAMOptionsByGeneration = (generation) => {
  if (!generation) return [];

  // Check if generation matches DDR3 (3rd-5th Gen)
  if (ramUpgradePrices.ddr3.generations.includes(generation)) {
    return ramUpgradePrices.ddr3.options;
  }

  // Check if generation matches DDR4 (6th-11th Gen)
  if (ramUpgradePrices.ddr4.generations.includes(generation)) {
    return ramUpgradePrices.ddr4.options;
  }

  return [];
};

// Helper function to get RAM type based on generation
export const getRAMTypeByGeneration = (generation) => {
  if (!generation) return 'DDR4';

  if (ramUpgradePrices.ddr3.generations.includes(generation)) {
    return ramUpgradePrices.ddr3.ramType;
  }

  if (ramUpgradePrices.ddr4.generations.includes(generation)) {
    return ramUpgradePrices.ddr4.ramType;
  }

  return 'DDR4';
};

// Helper function to get SSD upgrade options based on current storage
export const getSSDUpgradeOptions = (currentStorage) => {
  if (!currentStorage) return [];

  // Normalize storage string (e.g., "128GB SSD" -> "128GB", "125 GB" -> "125GB")
  const storageMatch = currentStorage.match(/(\d+)\s*(GB|TB)/i);
  if (!storageMatch) return [];

  let normalizedStorage = storageMatch[1] + storageMatch[2].toUpperCase();

  // Try to find upgrades for the normalized storage
  let upgrades = ssdUpgradePrices[normalizedStorage];

  // If not found and it's 128GB, also try 125GB (common variation)
  if (!upgrades && normalizedStorage === '128GB') {
    upgrades = ssdUpgradePrices['125GB'];
    normalizedStorage = '125GB';
  }

  // If not found and it's 125GB, also try 128GB (common variation)
  if (!upgrades && normalizedStorage === '125GB') {
    upgrades = ssdUpgradePrices['128GB'];
    normalizedStorage = '128GB';
  }

  if (!upgrades) return [];

  return Object.entries(upgrades).map(([capacity, price]) => ({
    capacity,
    price,
    label: `Upgrade to ${capacity} SSD`,
    from: normalizedStorage
  }));
};

// Helper function to get ALL SSD options for any laptop (shows all options regardless of current storage)
export const getAllSSDOptions = () => {
  // Use prices from 125GB/128GB upgrade path as universal pricing
  return [
    { capacity: '256GB', price: ssdUpgradePrices['125GB']['256GB'], label: '256GB SSD' },
    { capacity: '512GB', price: ssdUpgradePrices['125GB']['512GB'], label: '512GB SSD' },
    { capacity: '1TB', price: ssdUpgradePrices['125GB']['1TB'], label: '1TB SSD' }
  ];
};

// Helper function to calculate upgrade price
export const calculateUpgradePrice = (currentStorage, targetStorage) => {
  if (!currentStorage || !targetStorage) return 0;

  const currentMatch = currentStorage.match(/(\d+)\s*(GB|TB)/i);
  const targetMatch = targetStorage.match(/(\d+)\s*(GB|TB)/i);

  if (!currentMatch || !targetMatch) return 0;

  let normalizedCurrent = currentMatch[1] + currentMatch[2].toUpperCase();
  const normalizedTarget = targetMatch[1] + targetMatch[2].toUpperCase();

  // Handle 125GB/128GB equivalence
  if (normalizedCurrent === '128GB' && !ssdUpgradePrices['128GB']) {
    normalizedCurrent = '125GB';
  }
  if (normalizedCurrent === '125GB' && !ssdUpgradePrices['125GB']) {
    normalizedCurrent = '128GB';
  }

  const upgrades = ssdUpgradePrices[normalizedCurrent];
  if (!upgrades) return 0;

  const price = upgrades[normalizedTarget];

  return price || 0;
};

// Helper function to get all available storage capacities for SSD upgrades
export const getAvailableStorageCapacities = () => {
  return ['125GB', '128GB', '256GB', '512GB', '1TB'];
};

// Helper function to validate if upgrade path exists
export const isValidUpgradePath = (currentStorage, targetStorage) => {
  const currentMatch = currentStorage.match(/(\d+)\s*(GB|TB)/i);
  const targetMatch = targetStorage.match(/(\d+)\s*(GB|TB)/i);

  if (!currentMatch || !targetMatch) return false;

  let normalizedCurrent = currentMatch[1] + currentMatch[2].toUpperCase();
  const normalizedTarget = targetMatch[1] + targetMatch[2].toUpperCase();

  // Handle 125GB/128GB equivalence
  if (normalizedCurrent === '128GB' && !ssdUpgradePrices['128GB']) {
    normalizedCurrent = '125GB';
  }
  if (normalizedCurrent === '125GB' && !ssdUpgradePrices['125GB']) {
    normalizedCurrent = '128GB';
  }

  const upgrades = ssdUpgradePrices[normalizedCurrent];
  if (!upgrades) return false;

  return upgrades.hasOwnProperty(normalizedTarget);
};
